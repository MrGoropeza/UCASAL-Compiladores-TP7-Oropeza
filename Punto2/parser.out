Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> S
Rule 1     S -> PROC id InP L FinP
Rule 2     L -> V
Rule 3     L -> C
Rule 4     L -> V coma L
Rule 5     L -> C coma L
Rule 6     V -> VAR id
Rule 7     C -> CONST id

Terminals, with rules where they appear

CONST                : 7
FinP                 : 1
InP                  : 1
PROC                 : 1
VAR                  : 6
coma                 : 4 5
error                : 
id                   : 1 6 7

Nonterminals, with rules where they appear

C                    : 3 5
L                    : 1 4 5
S                    : 0
V                    : 2 4

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . PROC id InP L FinP

    PROC            shift and go to state 2

    S                              shift and go to state 1

state 1

    (0) S' -> S .



state 2

    (1) S -> PROC . id InP L FinP

    id              shift and go to state 3


state 3

    (1) S -> PROC id . InP L FinP

    InP             shift and go to state 4


state 4

    (1) S -> PROC id InP . L FinP
    (2) L -> . V
    (3) L -> . C
    (4) L -> . V coma L
    (5) L -> . C coma L
    (6) V -> . VAR id
    (7) C -> . CONST id

    VAR             shift and go to state 8
    CONST           shift and go to state 9

    L                              shift and go to state 5
    V                              shift and go to state 6
    C                              shift and go to state 7

state 5

    (1) S -> PROC id InP L . FinP

    FinP            shift and go to state 10


state 6

    (2) L -> V .
    (4) L -> V . coma L

    FinP            reduce using rule 2 (L -> V .)
    coma            shift and go to state 11


state 7

    (3) L -> C .
    (5) L -> C . coma L

    FinP            reduce using rule 3 (L -> C .)
    coma            shift and go to state 12


state 8

    (6) V -> VAR . id

    id              shift and go to state 13


state 9

    (7) C -> CONST . id

    id              shift and go to state 14


state 10

    (1) S -> PROC id InP L FinP .

    $end            reduce using rule 1 (S -> PROC id InP L FinP .)


state 11

    (4) L -> V coma . L
    (2) L -> . V
    (3) L -> . C
    (4) L -> . V coma L
    (5) L -> . C coma L
    (6) V -> . VAR id
    (7) C -> . CONST id

    VAR             shift and go to state 8
    CONST           shift and go to state 9

    V                              shift and go to state 6
    L                              shift and go to state 15
    C                              shift and go to state 7

state 12

    (5) L -> C coma . L
    (2) L -> . V
    (3) L -> . C
    (4) L -> . V coma L
    (5) L -> . C coma L
    (6) V -> . VAR id
    (7) C -> . CONST id

    VAR             shift and go to state 8
    CONST           shift and go to state 9

    C                              shift and go to state 7
    L                              shift and go to state 16
    V                              shift and go to state 6

state 13

    (6) V -> VAR id .

    coma            reduce using rule 6 (V -> VAR id .)
    FinP            reduce using rule 6 (V -> VAR id .)


state 14

    (7) C -> CONST id .

    coma            reduce using rule 7 (C -> CONST id .)
    FinP            reduce using rule 7 (C -> CONST id .)


state 15

    (4) L -> V coma L .

    FinP            reduce using rule 4 (L -> V coma L .)


state 16

    (5) L -> C coma L .

    FinP            reduce using rule 5 (L -> C coma L .)

